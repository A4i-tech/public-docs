{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"onboarding/","title":"\ud83d\udc4b Welcome to the A4I Development Team","text":"<p>We\u2019re excited to have you as part of our open-source vision to create social good through technology!  </p> <p>This guide covers: 1. General guidelines &amp; expectations 2. Communications setup 3. Development environment 4. A4I impact areas (Healthcare, Education, Accessibility)</p>"},{"location":"onboarding/#1-general-guidelines","title":"1. \u2705 General Guidelines","text":""},{"location":"onboarding/#tech-proficiency","title":"Tech Proficiency","text":"<p>While A4I has impact across multiple sectors through solutions, we expect new contributors to be comfortable with: - Version Control: Git, GitHub (PRs, Issues, branching) - Programming Basics: Concepts of OS, Networking, Data Structures and Algorithm - Collaboration Tools: Markdown, documentation practices, AI / non-AI based IDEs - Cloud &amp; Infra (Basics):  Docker, CI/CD concepts via Github Actions, knowledge of working on cloud -  Microsoft Azure, AWS or GCP</p> <p>\u26a0\ufe0f If you\u2019re unfamiliar with any of these, don\u2019t worry\u2014pairing and resource links are available.</p>"},{"location":"onboarding/#values-we-uphold","title":"Values We Uphold","text":"<ul> <li>Open-source collaboration</li> <li>Accessibility-first design</li> <li>Clear communication &amp; documentation</li> <li>Regular sprint planning and retrospectives</li> </ul>"},{"location":"onboarding/#2-communications-setup","title":"2. \ud83d\udcac Communications Setup","text":"<ol> <li>Email Access </li> <li>Ensure you have your <code>@iiitb.ac.in</code> email account set up with Outlook access.</li> <li> <p>Add it to GitHub for repo access + notifications.</p> </li> <li> <p>Microsoft Teams </p> </li> <li>Join the <code>A4I IIITB</code> team.  </li> <li>Channels include:  <ul> <li><code>General</code> \u2013 Org-wide updates  </li> <li><code>Engineering Huddle</code> \u2013 Technical discussions  </li> <li><code>Sikshana Foundation</code>, <code>Khushi Baby</code>, <code>Vision Empower</code> \u2013 Sector/project updates with external teams  </li> </ul> </li> </ol>"},{"location":"onboarding/#3-development-environment-setup","title":"3. \ud83d\udcbb Development Environment Setup","text":"<ol> <li>GitHub Access \u2013 Make sure you\u2019re added to the A4I organization.  </li> <li>Clone Repos \u2013 Start with cloning the repository applicable and try to follow the readme steps to get the pre-requisites and the application working.  </li> <li>Install Required Tools:</li> <li>Node.js LTS</li> <li>Python 3.10+</li> <li>Docker Desktop</li> <li>VS Code (recommended editor)</li> <li>Other specific datastores, libraries and tools as suggested in each repository</li> <li>Environment Variables \u2013 Use <code>.env.example</code> files in repos; request actual secrets from admin (never stored in GitHub).  </li> </ol>"},{"location":"onboarding/#4-a4i-impact-areas","title":"4. \ud83c\udf0d A4I Impact Areas","text":""},{"location":"onboarding/#healthcare-impact","title":"\ud83c\udfe5 Healthcare Impact","text":"<ul> <li>\ud83d\udcd1 ASHABot Launch Presentation </li> <li>\ud83d\udcc4 ASHABot Research Paper </li> <li>\ud83d\udcbb Codebase: byoeb</li> </ul>"},{"location":"onboarding/#education-impact","title":"\ud83d\udcda Education Impact","text":"<ul> <li>\ud83d\udcd1 Shiksha Foundation Launch Presentation </li> <li>\ud83d\udcc4 Shiksha Research Paper </li> <li>\ud83d\udcbb Codebase: Shiksha Copilot </li> <li>\ud83c\udfa5 YouTube Training Videos</li> </ul>"},{"location":"onboarding/#accessibility-impact","title":"\u267f Accessibility Impact","text":"<ul> <li>\ud83d\udcd1 Vision Empower Presentation </li> <li>\ud83d\udcc4 Vision Empower Research Paper </li> <li>\ud83d\udcbb Codebase: SEEDS </li> </ul>"},{"location":"onboarding/#need-help","title":"\ud83e\udd1d Need Help?","text":"<p>Reach out to your assigned buddy if you have any queries or run into issues. In case there is no assigned buddy yet, contact @soumabha or @kaltinhoth .  For general issues, you can also drop an email to <code>a4i@iiitb.ac.in</code></p>"},{"location":"workflows/","title":"\ud83d\udd04 Workflows","text":""},{"location":"workflows/#git-workflow","title":"Git Workflow","text":"<ul> <li>Branch naming: Since a4i does a lot of cross collaboration with different agencies - the branch naming convention starts with the org-name, followed by the individual-name, the type of task (<code>feature/*</code>. <code>bugfix/*</code>) and a short description. Example: <code>a4i/soumabha/feature/auth-changes</code></li> <li>Master or Main Branch: a4i/main is usually the main branch across all the codebase repositories. Direct fastforward merge / modification of commit history is not permitted on this branch and has special protected privilege</li> <li>Contribution: to contribute to changes, a new branch must be created from the latest master (a4i/main) and a pull request is to be used to merge changes.</li> <li>Compliance and Testing: Every pull request requires at least 1 reviewer to sign off to the changes. The requestor is also expected to pass all the necessary github actions workflow like secret-detection, unit-testing, code and security scanning.</li> </ul>"},{"location":"workflows/#issue-tracking","title":"Issue Tracking","text":"<ul> <li>Uses GitHub Issues</li> <li>Planning is via Project board</li> <li>Project Labels: <code>SEEDS</code>, <code>Shiksha-Copilot</code>, <code>ASHABot</code>, <code>General</code> : to indicate area of impact.</li> <li>Labels: <code>bug</code>, <code>enhancement</code>, <code>retro</code>, <code>infra</code>: to indicate quality and volume.</li> </ul>"},{"location":"workflows/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions run lint/tests on PR</li> <li>Staging deployment happens via a4i/main branch</li> </ul>"},{"location":"architecture/Inclusive-Architecture/","title":"Inclusive Agentic Architecture Template","text":"<p>Building Inclusive, Modular, and Agentic Platforms for Education, Healthcare, and Accessibility</p>"},{"location":"architecture/Inclusive-Architecture/#1-abstract","title":"1. Abstract","text":"<p>This whitepaper presents an inclusive, agentic architecture designed to enable scalable, modular, and human-centred AI systems across domains such as education, healthcare, and accessibility.</p> <p>Current digital ecosystems are fragmented, leading to duplication, limited reuse, and difficulty in scaling innovations. The proposed framework unifies these efforts through a layered reference architecture \u2014 comprising integration channels, experience orchestration, business logic, agent libraries, and tool adapters under an open and extensible model.</p> <p>The architecture emphasizes inclusivity, ensuring accessibility via multimodal channels such as mobile, feature phones, and assistive devices.  It also embeds security, auditability, and compliance guardrails upfront.</p>"},{"location":"architecture/Inclusive-Architecture/#2-motivation","title":"2. Motivation","text":"<ul> <li>Current solutions are point-specific and lack a unified reference model.  </li> <li>Fragmentation challenge: Similar patterns solved differently \u2192 difficult to reuse, scale, or maintain.  </li> <li>Need for a common architectural template that:</li> <li>Reduces duplication of effort across projects.  </li> <li>Ensures scalability &amp; reliability during usage surges.  </li> <li>Simplifies integration of new datastores and connectors.  </li> <li>Embeds security, auditability, and compliance guardrails upfront.  </li> </ul> <p>Long-term Vision: A community-driven reference architecture that improves developer onboarding, speeds up experimentation, and ensures enterprise-grade resilience.</p>"},{"location":"architecture/Inclusive-Architecture/#3-high-level-layered-architecture","title":"3. High-Level Layered Architecture","text":"<p> Figure 1: High-Level Agentic Architecture Template</p>"},{"location":"architecture/Inclusive-Architecture/#4-components-of-the-architecture","title":"4. Components of the Architecture","text":""},{"location":"architecture/Inclusive-Architecture/#41-integration-layer","title":"4.1 Integration Layer","text":"<p>Serves as the system\u2019s backbone for connectivity and interoperability. It manages authentication, auditing, and compliance across integrations. Main goal: make external data feel internal while maintaining isolation and control.</p>"},{"location":"architecture/Inclusive-Architecture/#channels-for-access","title":"Channels for Access","text":"<p>Supports: - Mobile applications - Feature phone\u2013based telecommunications - Web interfaces - Assistive devices (e.g., Hexis, Iris) - Messaging interfaces (WhatsApp, Telegram, SMS)</p>"},{"location":"architecture/Inclusive-Architecture/#data-flow-example","title":"Data Flow Example","text":"<pre><code>sequenceDiagram\n    participant User\n    participant ChannelAdapter\n    participant IntegrationLayer\n    participant ExperienceLayer\n\n    User-&gt;&gt;ChannelAdapter: Message / Event\n    ChannelAdapter-&gt;&gt;IntegrationLayer: Normalized request\n    IntegrationLayer-&gt;&gt;ExperienceLayer: Authenticated, enriched payload</code></pre>"},{"location":"architecture/Inclusive-Architecture/#experience-layer-with-user-conversation-and-memory","title":"Experience Layer (with User, Conversation and Memory)","text":"<p>Acts as the central user interaction entry point, normalizing inputs from diverse channels for unified downstream handling. It enriches the data with context, authentication, and personalization cues, and formats output for the appropriate channel.</p>"},{"location":"architecture/Inclusive-Architecture/#example-data-flow","title":"Example Data Flow","text":""},{"location":"architecture/Inclusive-Architecture/#data-flow","title":"Data Flow","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant User\n    participant IntegrationLayer\n    participant ExperienceLayer\n    participant BusinessOrchestration\n\n    User-&gt;&gt;IntegrationLayer: Sends message via channel adapter &lt;br/&gt;(text, audio, button click)\n    IntegrationLayer-&gt;&gt;ExperienceLayer: Enriched, authenticated input\n    Note right of ExperienceLayer: Create &lt;br/&gt;`standard_request` JSON &lt;br/&gt;with metadata:&lt;br/&gt;\u2022 channel_type&lt;br/&gt;\u2022 user_id&lt;br/&gt;\u2022 locale&lt;br/&gt;\u2022 timestamp&lt;br/&gt;\u2022 raw_content\n    ExperienceLayer-&gt;&gt;BusinessOrchestration: Forward structured request&lt;br/&gt;via REST or Message Bus</code></pre> <p>Sample json <pre><code>{\n  \"standard_request\": {\n    \"channel_type\": \"whatsapp\",\n    \"user_id\": \"ASHA_908\",\n    \"locale\": \"bn\",\n    \"timestamp\": \"2025-10-08T08:20:30Z\",\n    \"content\": \"What are the symptoms of dengue?\"\n  }\n}\n</code></pre></p>"},{"location":"architecture/Inclusive-Architecture/#example-memory-query","title":"Example Memory Query","text":"<pre><code>{\n  \"user_id\": \"ASHA_908\",\n  \"context_type\": \"conversation_summary\"\n}\n</code></pre> <p>Response: <pre><code>{\n  \"last_session_date\": \"2025-10-01\",\n  \"topics_discussed\": [\"child vaccination\", \"vaccine application\"],\n  \"pending_action\": \"confirm new date\",\n  \"raw_messages\": [{\n       ...\n       \"source\": \"whatsapp\",\n       ...\n   }]\n}\n</code></pre></p> <p>The Experience Layer forwards this normalized structure to the Business Orchestration Layer.</p>"},{"location":"architecture/Inclusive-Architecture/#42-business-agentic-orchestration-layer","title":"4.2 Business &amp; Agentic Orchestration Layer","text":"<p>Implements domain-level logic through a hybrid of deterministic services and agentic orchestration.</p> <ul> <li>Business Services: Integrate user information, manage persistent data, and handle workflows.  </li> <li>Agent-Oriented Orchestration: Delegates reasoning and transformation tasks to agents.</li> </ul> <p>In effect, it acts as the \u201cbrain\u201d for domain behaviour, handling branching logic, fallback, error handling, and domain-specific rules or constraints.</p>"},{"location":"architecture/Inclusive-Architecture/#agent-library","title":"Agent Library","text":"<p>Agents operate as autonomous reasoning nodes that receive and emit structured events.  Each agent processes data and can be chained in different order enabling concurrent reasoning and flexible delegation without direct coupling.</p> <p>Encapsulates AI reasoning and cognitive tasks into reusable \"agents\", allowing complex system logic to be broken into small, composable and reusable \"units of work\".</p> Agent Type Function Example Use Case RAG Retrieval-Augmented Generation Query knowledge base Translation Multilingual Interaction Local language conversion ASR/TTS Speech Processing IVR / audio channels Consensus Evaluator Group agreement logic Feedback loops Data Sanity Validation and safety Input consistency <p>Each agent defines input/output contracts and performance expectations for interoperability.</p> <p>Lifecycle and Agent Invocation</p> <p>Step 1: Registered in the central Agent Registry under a versioned identifier.</p> <p>Step 2: Invoked by an Orchestrator or another agent based on workflow logic.</p> <p>Step 3: Executed with full context (user/session/memory data).</p> <p>Step 4: Returns standardized output for downstream agents or final rendering.</p> <pre><code>sequenceDiagram\n    autonumber\n    participant Orchestrator\n    participant AgentRegistry\n    participant RAGAgent\n    participant TTSAgent\n\n    Orchestrator-&gt;&gt;AgentRegistry: Lookup(\"rag_agent:v1\")\n    AgentRegistry--&gt;&gt;Orchestrator: Return config &amp; schema\n    Orchestrator-&gt;&gt;RAGAgent: Execute(query=\"symptoms of dengue\")\n    RAGAgent--&gt;&gt;Orchestrator: Return summary + confidence\n    Orchestrator-&gt;&gt;TTSAgent: Convert text \u2192 speech\n    TTSAgent--&gt;&gt;Orchestrator: Return audio file reference\n</code></pre>"},{"location":"architecture/Inclusive-Architecture/#tool-library","title":"Tool Library","text":"<p>Tools are deterministic connectors or adapters that perform actions or I/O without reasoning.</p> Tool Purpose Example WhatsApp Adapter Messaging Send notifications IVR Gateway Telephony Play prompts Email Tool Communication Send updates CRM Adapter External Systems Update lead data MongoDB Adapter Storage Persist structured data <pre><code>sequenceDiagram\n    autonumber\n    participant Agent\n    participant ToolRegistry\n    participant WhatsAppAdapter\n    participant ExternalAPI\n\n    Agent-&gt;&gt;ToolRegistry: Lookup(\"whatsapp_adapter:v2\")\n    ToolRegistry--&gt;&gt;Agent: Return schema + endpoint\n    Agent-&gt;&gt;WhatsAppAdapter: Send(recipient=\"+91XXXX\", template=\"notify_schedule\")\n    WhatsAppAdapter-&gt;&gt;ExternalAPI: POST /messages\n    ExternalAPI--&gt;&gt;WhatsAppAdapter: {status: \"success\", id: \"wa_001\"}\n    WhatsAppAdapter--&gt;&gt;Agent: status=success, timestamp\n</code></pre>"},{"location":"architecture/Inclusive-Architecture/#example-tool-invocation","title":"Example Tool Invocation","text":"<pre><code>{\n  \"tool\": \"whatsapp_adapter\",\n  \"action\": \"send_message\",\n  \"recipient\": \"+91XXXXXXXXXX\",\n  \"message\": \"Your vaccination is scheduled for 12 Oct at 10 AM.\",\n  \"template_id\": \"notify_schedule\"\n}\n</code></pre> <p>Real World Example: Sahayak Orchestrator</p> <p>The Sahayak Orchestrator exemplifies how these architectural layers operate in unison.  - It receives user inputs\u2014along with historical context and session memory\u2014and determines which agents or tools should act next.  - Using its centralized Tool Registry, populated with system-level MCP (Multi-Channel Plugin) abstractions, the orchestrator dynamically routes requests to the appropriate agents for reasoning and to the corresponding tools for deterministic execution.  - This event-driven workflow enables Sahayak to coordinate human-like reasoning with system-level precision, ensuring adaptive, multimodal interactions across channels and services.</p> <pre><code>sequenceDiagram\n    autonumber\n    participant ExperienceLayer\n    participant Orchestrator\n    participant Agent\n    participant Tool\n    participant ExternalService\n\n    ExperienceLayer-&gt;&gt;Orchestrator: User prompt, context or event data\n    Orchestrator-&gt;&gt;Agent: SahayakTextRequestEvent\n    Agent-&gt;&gt;Tool: ToolCallRequestEvent (resolved via known_tool_owners)\n    Tool-&gt;&gt;ExternalService: Executes operation (e.g., send message)\n    ExternalService--&gt;&gt;Tool: Returns API result\n    Tool--&gt;&gt;Agent: ToolCallExecutionEvent (structured response)\n    Agent--&gt;&gt;Orchestrator: Final message event\n    Orchestrator--&gt;&gt;ExperienceLayer: Rendered response</code></pre>"},{"location":"architecture/Inclusive-Architecture/#43-ingestion-layer","title":"4.3 Ingestion Layer","text":"<p>converts raw or semi-structured content (textbooks, media, logs) into enriched, searchable knowledge representations for downstream agents. Supports high-throughput ingestion, context caching, and long-term knowledge storage.</p>"},{"location":"architecture/Inclusive-Architecture/#data-flow_1","title":"Data Flow","text":"<pre><code>flowchart LR\n    A[1\ufe0f\u20e3 Ingestion Trigger] --&gt; B[2\ufe0f\u20e3 Data Retrieval]\n    B --&gt; C[3\ufe0f\u20e3 Parsing &amp; Preprocessing]\n    C --&gt; D[4\ufe0f\u20e3 Chunking &amp; Metadata Enrichment]\n    D --&gt; E[5\ufe0f\u20e3 Embedding &amp; Indexing]\n    E --&gt; F[6\ufe0f\u20e3 Storage &amp; Caching]\n    F --&gt; G[7\ufe0f\u20e3 Event Logging &amp; Completion]</code></pre> <p>Ingestion layer relies heavily on the agent and tool libraries preprovisioned. Sample examples</p> Type Responsibility Example Components Parser Agent Handles parsing, cleaning, extraction logic. <code>TextExtractionAgent</code>, <code>SpeechToTextAgent</code> Chunking Agent Segments and structures data. <code>ChunkingAgent</code>, <code>ContentSplitterTool</code> Embedding Agent Generates semantic embeddings from processed text. <code>EmbeddingAgent</code>, <code>OpenAIEmbeddingTool</code> Storage / Memory Tools Persist processed data into memory or vector DBs. <code>VectorDBTool</code>, <code>KnowledgeBaseAdapter</code>, <code>CacheTool</code> Logging &amp; Audit Agents Maintain ingestion logs, telemetry, and versioned lineage. <code>IngestionLoggerAgent</code>, <code>TelemetryCollectorTool</code>"},{"location":"architecture/Inclusive-Architecture/#5-real-world-applications","title":"5. Real-World Applications","text":""},{"location":"architecture/Inclusive-Architecture/#education","title":"Education","text":"<ul> <li>Teachers can aggregate lesson plans, generate evaluations, and access learning content through multilingual and multimodal channels.</li> </ul>"},{"location":"architecture/Inclusive-Architecture/#healthcare","title":"Healthcare","text":"<ul> <li>Field health workers (ASHAs/ANMs) can report via WhatsApp or IVR, enabling data capture and alerts in remote areas.</li> </ul>"},{"location":"architecture/Inclusive-Architecture/#accessibility","title":"Accessibility","text":"<ul> <li>Voice and assistive-device-based interfaces ensure participation for users with disabilities or low-tech environments.</li> </ul>"},{"location":"architecture/Inclusive-Architecture/#6-design-principles","title":"6. \ud83c\udfaf Design Principles","text":"\ud83e\udde9 Principle \ud83d\udca1 Description \ud83d\udd17 Implication \ud83c\udf10 Open Source First Built to evolve collaboratively and transparently. Encourages community contributions and shared innovation. \ud83e\uddf1 Highly Modular Each capability functions as a reusable component or library. Simplifies updates, enables team-specific extensions. \u2696\ufe0f Horizontally Scalable Designed for distributed, cloud-native scaling. Supports large concurrent workloads and adaptive scaling. \u267f Inclusive &amp; Multimodal Accessible via text, voice, and assistive devices. Ensures equitable access across digital divides. \ud83e\udd16 AI-First Agentic reasoning and cognitive workflows by design. Enables contextual automation and hybrid human-AI work. \ud83d\udd12 Secure by Design Data flow and access control built into architecture. Simplifies compliance, auditability, and data governance. \ud83d\udd0c Plug &amp; Play Extensible via standardized connectors and APIs. Allows rapid onboarding of new channels or services. <p>\ud83d\udcac These principles form the DNA of the Agentic Template \u2014 ensuring it stays modular, scalable, and inclusive across domains.</p>"},{"location":"architecture/Inclusive-Architecture/#7-limitations-future-considerations","title":"7. Limitations &amp; Future Considerations","text":"<ul> <li>Complex Orchestration: Debugging multi-agent workflows may be non-trivial.  </li> <li>Connectivity Dependency: Cloud-dependent features (RAG, ASR/TTS) may face offline limitations.  </li> <li>Tool Explosion: Too many tools risk hallucinated abilities. Guardrails and observability layers are essential.  </li> <li>Maintenance Overhead: Hybrid agentic-service systems require continuous synchronization and version management.</li> <li>Evolving Standards: Interoperability may drift with external APIs and / or AI model changes</li> </ul>"},{"location":"architecture/Inclusive-Architecture/#8-references","title":"8. References","text":"<ul> <li>Inclusive Architecture Whitepaper (2025) </li> <li>Architecture Template (Draft, A4I, Aug 2025) </li> <li>Microsoft Azure AI &amp; Cognitive Services Documentation  </li> <li>OpenAI Function Calling &amp; Orchestration Patterns (2024)  </li> <li>WHO Digital Health Guidelines (2023)</li> </ul> <p>\u00a9 2025 A4I. All Rights Reserved.</p>"}]}